// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2eproto;
namespace dbcontent {
class QueryReply;
class QueryReplyDefaultTypeInternal;
extern QueryReplyDefaultTypeInternal _QueryReply_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
}  // namespace dbcontent
PROTOBUF_NAMESPACE_OPEN
template<> ::dbcontent::QueryReply* Arena::CreateMaybeMessage<::dbcontent::QueryReply>(Arena*);
template<> ::dbcontent::QueryRequest* Arena::CreateMaybeMessage<::dbcontent::QueryRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dbcontent {

// ===================================================================

class QueryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbcontent.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(nullptr);
  }

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbcontent.QueryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:dbcontent.QueryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// -------------------------------------------------------------------

class QueryReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dbcontent.QueryReply) */ {
 public:
  QueryReply();
  virtual ~QueryReply();

  QueryReply(const QueryReply& from);
  QueryReply(QueryReply&& from) noexcept
    : QueryReply() {
    *this = ::std::move(from);
  }

  inline QueryReply& operator=(const QueryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryReply& operator=(QueryReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryReply* internal_default_instance() {
    return reinterpret_cast<const QueryReply*>(
               &_QueryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryReply& a, QueryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryReply* New() const final {
    return CreateMaybeMessage<QueryReply>(nullptr);
  }

  QueryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryReply& from);
  void MergeFrom(const QueryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dbcontent.QueryReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_db_2eproto);
    return ::descriptor_table_db_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessHobbyFieldNumber = 3,
    kMessAgeFieldNumber = 1,
    kMessSchoolFieldNumber = 2,
    kMessNameFieldNumber = 4,
  };
  // repeated string mess_hobby = 3;
  int mess_hobby_size() const;
  private:
  int _internal_mess_hobby_size() const;
  public:
  void clear_mess_hobby();
  const std::string& mess_hobby(int index) const;
  std::string* mutable_mess_hobby(int index);
  void set_mess_hobby(int index, const std::string& value);
  void set_mess_hobby(int index, std::string&& value);
  void set_mess_hobby(int index, const char* value);
  void set_mess_hobby(int index, const char* value, size_t size);
  std::string* add_mess_hobby();
  void add_mess_hobby(const std::string& value);
  void add_mess_hobby(std::string&& value);
  void add_mess_hobby(const char* value);
  void add_mess_hobby(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mess_hobby() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mess_hobby();
  private:
  const std::string& _internal_mess_hobby(int index) const;
  std::string* _internal_add_mess_hobby();
  public:

  // string mess_age = 1;
  void clear_mess_age();
  const std::string& mess_age() const;
  void set_mess_age(const std::string& value);
  void set_mess_age(std::string&& value);
  void set_mess_age(const char* value);
  void set_mess_age(const char* value, size_t size);
  std::string* mutable_mess_age();
  std::string* release_mess_age();
  void set_allocated_mess_age(std::string* mess_age);
  private:
  const std::string& _internal_mess_age() const;
  void _internal_set_mess_age(const std::string& value);
  std::string* _internal_mutable_mess_age();
  public:

  // string mess_school = 2;
  void clear_mess_school();
  const std::string& mess_school() const;
  void set_mess_school(const std::string& value);
  void set_mess_school(std::string&& value);
  void set_mess_school(const char* value);
  void set_mess_school(const char* value, size_t size);
  std::string* mutable_mess_school();
  std::string* release_mess_school();
  void set_allocated_mess_school(std::string* mess_school);
  private:
  const std::string& _internal_mess_school() const;
  void _internal_set_mess_school(const std::string& value);
  std::string* _internal_mutable_mess_school();
  public:

  // string mess_name = 4;
  void clear_mess_name();
  const std::string& mess_name() const;
  void set_mess_name(const std::string& value);
  void set_mess_name(std::string&& value);
  void set_mess_name(const char* value);
  void set_mess_name(const char* value, size_t size);
  std::string* mutable_mess_name();
  std::string* release_mess_name();
  void set_allocated_mess_name(std::string* mess_name);
  private:
  const std::string& _internal_mess_name() const;
  void _internal_set_mess_name(const std::string& value);
  std::string* _internal_mutable_mess_name();
  public:

  // @@protoc_insertion_point(class_scope:dbcontent.QueryReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mess_hobby_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mess_age_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mess_school_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mess_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_db_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryRequest

// string name = 1;
inline void QueryRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRequest::name() const {
  // @@protoc_insertion_point(field_get:dbcontent.QueryRequest.name)
  return _internal_name();
}
inline void QueryRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dbcontent.QueryRequest.name)
}
inline std::string* QueryRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dbcontent.QueryRequest.name)
  return _internal_mutable_name();
}
inline const std::string& QueryRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void QueryRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbcontent.QueryRequest.name)
}
inline void QueryRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbcontent.QueryRequest.name)
}
inline void QueryRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbcontent.QueryRequest.name)
}
inline std::string* QueryRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRequest::release_name() {
  // @@protoc_insertion_point(field_release:dbcontent.QueryRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dbcontent.QueryRequest.name)
}

// -------------------------------------------------------------------

// QueryReply

// string mess_age = 1;
inline void QueryReply::clear_mess_age() {
  mess_age_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryReply::mess_age() const {
  // @@protoc_insertion_point(field_get:dbcontent.QueryReply.mess_age)
  return _internal_mess_age();
}
inline void QueryReply::set_mess_age(const std::string& value) {
  _internal_set_mess_age(value);
  // @@protoc_insertion_point(field_set:dbcontent.QueryReply.mess_age)
}
inline std::string* QueryReply::mutable_mess_age() {
  // @@protoc_insertion_point(field_mutable:dbcontent.QueryReply.mess_age)
  return _internal_mutable_mess_age();
}
inline const std::string& QueryReply::_internal_mess_age() const {
  return mess_age_.GetNoArena();
}
inline void QueryReply::_internal_set_mess_age(const std::string& value) {
  
  mess_age_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryReply::set_mess_age(std::string&& value) {
  
  mess_age_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbcontent.QueryReply.mess_age)
}
inline void QueryReply::set_mess_age(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mess_age_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbcontent.QueryReply.mess_age)
}
inline void QueryReply::set_mess_age(const char* value, size_t size) {
  
  mess_age_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbcontent.QueryReply.mess_age)
}
inline std::string* QueryReply::_internal_mutable_mess_age() {
  
  return mess_age_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryReply::release_mess_age() {
  // @@protoc_insertion_point(field_release:dbcontent.QueryReply.mess_age)
  
  return mess_age_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryReply::set_allocated_mess_age(std::string* mess_age) {
  if (mess_age != nullptr) {
    
  } else {
    
  }
  mess_age_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mess_age);
  // @@protoc_insertion_point(field_set_allocated:dbcontent.QueryReply.mess_age)
}

// string mess_school = 2;
inline void QueryReply::clear_mess_school() {
  mess_school_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryReply::mess_school() const {
  // @@protoc_insertion_point(field_get:dbcontent.QueryReply.mess_school)
  return _internal_mess_school();
}
inline void QueryReply::set_mess_school(const std::string& value) {
  _internal_set_mess_school(value);
  // @@protoc_insertion_point(field_set:dbcontent.QueryReply.mess_school)
}
inline std::string* QueryReply::mutable_mess_school() {
  // @@protoc_insertion_point(field_mutable:dbcontent.QueryReply.mess_school)
  return _internal_mutable_mess_school();
}
inline const std::string& QueryReply::_internal_mess_school() const {
  return mess_school_.GetNoArena();
}
inline void QueryReply::_internal_set_mess_school(const std::string& value) {
  
  mess_school_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryReply::set_mess_school(std::string&& value) {
  
  mess_school_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbcontent.QueryReply.mess_school)
}
inline void QueryReply::set_mess_school(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mess_school_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbcontent.QueryReply.mess_school)
}
inline void QueryReply::set_mess_school(const char* value, size_t size) {
  
  mess_school_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbcontent.QueryReply.mess_school)
}
inline std::string* QueryReply::_internal_mutable_mess_school() {
  
  return mess_school_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryReply::release_mess_school() {
  // @@protoc_insertion_point(field_release:dbcontent.QueryReply.mess_school)
  
  return mess_school_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryReply::set_allocated_mess_school(std::string* mess_school) {
  if (mess_school != nullptr) {
    
  } else {
    
  }
  mess_school_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mess_school);
  // @@protoc_insertion_point(field_set_allocated:dbcontent.QueryReply.mess_school)
}

// repeated string mess_hobby = 3;
inline int QueryReply::_internal_mess_hobby_size() const {
  return mess_hobby_.size();
}
inline int QueryReply::mess_hobby_size() const {
  return _internal_mess_hobby_size();
}
inline void QueryReply::clear_mess_hobby() {
  mess_hobby_.Clear();
}
inline std::string* QueryReply::add_mess_hobby() {
  // @@protoc_insertion_point(field_add_mutable:dbcontent.QueryReply.mess_hobby)
  return _internal_add_mess_hobby();
}
inline const std::string& QueryReply::_internal_mess_hobby(int index) const {
  return mess_hobby_.Get(index);
}
inline const std::string& QueryReply::mess_hobby(int index) const {
  // @@protoc_insertion_point(field_get:dbcontent.QueryReply.mess_hobby)
  return _internal_mess_hobby(index);
}
inline std::string* QueryReply::mutable_mess_hobby(int index) {
  // @@protoc_insertion_point(field_mutable:dbcontent.QueryReply.mess_hobby)
  return mess_hobby_.Mutable(index);
}
inline void QueryReply::set_mess_hobby(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:dbcontent.QueryReply.mess_hobby)
  mess_hobby_.Mutable(index)->assign(value);
}
inline void QueryReply::set_mess_hobby(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:dbcontent.QueryReply.mess_hobby)
  mess_hobby_.Mutable(index)->assign(std::move(value));
}
inline void QueryReply::set_mess_hobby(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mess_hobby_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dbcontent.QueryReply.mess_hobby)
}
inline void QueryReply::set_mess_hobby(int index, const char* value, size_t size) {
  mess_hobby_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dbcontent.QueryReply.mess_hobby)
}
inline std::string* QueryReply::_internal_add_mess_hobby() {
  return mess_hobby_.Add();
}
inline void QueryReply::add_mess_hobby(const std::string& value) {
  mess_hobby_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dbcontent.QueryReply.mess_hobby)
}
inline void QueryReply::add_mess_hobby(std::string&& value) {
  mess_hobby_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:dbcontent.QueryReply.mess_hobby)
}
inline void QueryReply::add_mess_hobby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mess_hobby_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dbcontent.QueryReply.mess_hobby)
}
inline void QueryReply::add_mess_hobby(const char* value, size_t size) {
  mess_hobby_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dbcontent.QueryReply.mess_hobby)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryReply::mess_hobby() const {
  // @@protoc_insertion_point(field_list:dbcontent.QueryReply.mess_hobby)
  return mess_hobby_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryReply::mutable_mess_hobby() {
  // @@protoc_insertion_point(field_mutable_list:dbcontent.QueryReply.mess_hobby)
  return &mess_hobby_;
}

// string mess_name = 4;
inline void QueryReply::clear_mess_name() {
  mess_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryReply::mess_name() const {
  // @@protoc_insertion_point(field_get:dbcontent.QueryReply.mess_name)
  return _internal_mess_name();
}
inline void QueryReply::set_mess_name(const std::string& value) {
  _internal_set_mess_name(value);
  // @@protoc_insertion_point(field_set:dbcontent.QueryReply.mess_name)
}
inline std::string* QueryReply::mutable_mess_name() {
  // @@protoc_insertion_point(field_mutable:dbcontent.QueryReply.mess_name)
  return _internal_mutable_mess_name();
}
inline const std::string& QueryReply::_internal_mess_name() const {
  return mess_name_.GetNoArena();
}
inline void QueryReply::_internal_set_mess_name(const std::string& value) {
  
  mess_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryReply::set_mess_name(std::string&& value) {
  
  mess_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dbcontent.QueryReply.mess_name)
}
inline void QueryReply::set_mess_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mess_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dbcontent.QueryReply.mess_name)
}
inline void QueryReply::set_mess_name(const char* value, size_t size) {
  
  mess_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dbcontent.QueryReply.mess_name)
}
inline std::string* QueryReply::_internal_mutable_mess_name() {
  
  return mess_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryReply::release_mess_name() {
  // @@protoc_insertion_point(field_release:dbcontent.QueryReply.mess_name)
  
  return mess_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryReply::set_allocated_mess_name(std::string* mess_name) {
  if (mess_name != nullptr) {
    
  } else {
    
  }
  mess_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mess_name);
  // @@protoc_insertion_point(field_set_allocated:dbcontent.QueryReply.mess_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbcontent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_2eproto

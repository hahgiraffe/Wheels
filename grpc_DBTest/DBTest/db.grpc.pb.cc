// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: db.proto

#include "db.pb.h"
#include "db.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dbcontent {

static const char* QueryDB_method_names[] = {
  "/dbcontent.QueryDB/DoQuery",
  "/dbcontent.QueryDB/DoAllQuery",
};

std::unique_ptr< QueryDB::Stub> QueryDB::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< QueryDB::Stub> stub(new QueryDB::Stub(channel));
  return stub;
}

QueryDB::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DoQuery_(QueryDB_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoAllQuery_(QueryDB_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status QueryDB::Stub::DoQuery(::grpc::ClientContext* context, const ::dbcontent::QueryRequest& request, ::dbcontent::QueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoQuery_, context, request, response);
}

void QueryDB::Stub::experimental_async::DoQuery(::grpc::ClientContext* context, const ::dbcontent::QueryRequest* request, ::dbcontent::QueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoQuery_, context, request, response, std::move(f));
}

void QueryDB::Stub::experimental_async::DoQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbcontent::QueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoQuery_, context, request, response, std::move(f));
}

void QueryDB::Stub::experimental_async::DoQuery(::grpc::ClientContext* context, const ::dbcontent::QueryRequest* request, ::dbcontent::QueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoQuery_, context, request, response, reactor);
}

void QueryDB::Stub::experimental_async::DoQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dbcontent::QueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dbcontent::QueryReply>* QueryDB::Stub::AsyncDoQueryRaw(::grpc::ClientContext* context, const ::dbcontent::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbcontent::QueryReply>::Create(channel_.get(), cq, rpcmethod_DoQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dbcontent::QueryReply>* QueryDB::Stub::PrepareAsyncDoQueryRaw(::grpc::ClientContext* context, const ::dbcontent::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::dbcontent::QueryReply>::Create(channel_.get(), cq, rpcmethod_DoQuery_, context, request, false);
}

::grpc::ClientReader< ::dbcontent::QueryReply>* QueryDB::Stub::DoAllQueryRaw(::grpc::ClientContext* context, const ::dbcontent::QueryRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::dbcontent::QueryReply>::Create(channel_.get(), rpcmethod_DoAllQuery_, context, request);
}

void QueryDB::Stub::experimental_async::DoAllQuery(::grpc::ClientContext* context, ::dbcontent::QueryRequest* request, ::grpc::experimental::ClientReadReactor< ::dbcontent::QueryReply>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::dbcontent::QueryReply>::Create(stub_->channel_.get(), stub_->rpcmethod_DoAllQuery_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dbcontent::QueryReply>* QueryDB::Stub::AsyncDoAllQueryRaw(::grpc::ClientContext* context, const ::dbcontent::QueryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::dbcontent::QueryReply>::Create(channel_.get(), cq, rpcmethod_DoAllQuery_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dbcontent::QueryReply>* QueryDB::Stub::PrepareAsyncDoAllQueryRaw(::grpc::ClientContext* context, const ::dbcontent::QueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::dbcontent::QueryReply>::Create(channel_.get(), cq, rpcmethod_DoAllQuery_, context, request, false, nullptr);
}

QueryDB::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryDB_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< QueryDB::Service, ::dbcontent::QueryRequest, ::dbcontent::QueryReply>(
          [](QueryDB::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::dbcontent::QueryRequest* req,
             ::dbcontent::QueryReply* resp) {
               return service->DoQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      QueryDB_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< QueryDB::Service, ::dbcontent::QueryRequest, ::dbcontent::QueryReply>(
          [](QueryDB::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::dbcontent::QueryRequest* req,
             ::grpc_impl::ServerWriter<::dbcontent::QueryReply>* writer) {
               return service->DoAllQuery(ctx, req, writer);
             }, this)));
}

QueryDB::Service::~Service() {
}

::grpc::Status QueryDB::Service::DoQuery(::grpc::ServerContext* context, const ::dbcontent::QueryRequest* request, ::dbcontent::QueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QueryDB::Service::DoAllQuery(::grpc::ServerContext* context, const ::dbcontent::QueryRequest* request, ::grpc::ServerWriter< ::dbcontent::QueryReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dbcontent

